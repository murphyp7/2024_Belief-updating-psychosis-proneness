% Compute CAPE scores

function [scores,names] = get_CAPE_new(subjects)

% setup the Import Options
filename = "/mnt/homes/home024/pmurphy/Surprise_scz/questionnaires/Entscheidungsstudie_September 20, 2021.csv";
opts = delimitedTextImportOptions("NumVariables", 341);

% specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ["\t", ";"];

% specify column names and types
opts.VariableNames = ["StartDate", "EndDate", "Status", "IPAddress", "Progress", "Duration__in_seconds_", "Finished", "RecordedDate", "ResponseId", "RecipientLastName", "RecipientFirstName", "RecipientEmail", "ExternalReference", "LocationLatitude", "LocationLongitude", "DistributionChannel", "UserLanguage", "ID", "Alter", "Geschlecht", "Groesse", "Gewicht", "Rauchen_ja_nein", "Rauchen_TEXT", "Alkohol", "A_1_1", "A_1_2", "A_1_3", "A_2_1", "A_2_2", "A_2_3", "Drogen", "A_1_10", "A_1_20", "A_1_30", "A_1_4", "A_1_5", "A_1_6", "A_1_7", "A_1_8", "A_1_9", "A_1_11", "A_1_12", "A_1_13", "A_1_12_TEXT", "A_2_10", "A_2_20", "A_2_30", "A_2_4", "A_2_5", "A_2_6", "A_2_7", "A_2_8", "A_2_9", "A_2_11", "A_2_12", "A_2_13", "A_2_12_TEXT", "Sport", "Bildung", "Beruf", "QID15", "QID16_1", "QID16_2", "QID16_3", "QID16_4", "QID16_5", "QID16_6", "QID16_7", "QID16_8", "QID16_9", "Familienstand", "Kinder", "Kinderanzahl", "CAPE_1_dep", "CAPE_2_pos", "CAPE_3_neg", "CAPE_4_neg", "CAPE_5_pos", "CAPE_6_pos", "CAPE_7_pos", "CAPE_8_neg", "CAPE_9_dep", "CAPE_10_pos", "CAPE_11_pos", "CAPE_12_dep", "CAPE_13_pos", "CAPE_14_dep", "CAPE_15_pos", "CAPE_16_neg", "CAPE_17_pos", "CAPE_18_neg", "CAPE_19_dep", "CAPE_20_pos", "CAPE_21_neg", "CAPE_22_pos", "CAPE_23_neg", "CAPE_24_pos", "CAPE_25_neg", "CAPE_26_pos", "CAPE_27_neg", "CAPE_28_pos", "CAPE_29_neg", "CAPE_30_pos", "CAPE_31_pos", "CAPE_32_neg", "CAPE_33_pos", "CAPE_34_pos", "CAPE_35_neg", "CAPE_36_neg", "CAPE_37_neg", "CAPE_38_dep", "CAPE_39_dep", "CAPE_40_dep", "CAPE_41_pos", "CAPE_42_pos", "CAPE_1_dep_b", "CAPE_2_pos_b", "CAPE_3_neg_b", "CAPE_4_neg_b", "CAPE_5_pos_b", "CAPE_6_pos_b", "CAPE_7_pos_b", "CAPE_8_neg_b", "CAPE_9_dep_b", "CAPE_10_pos_b", "CAPE_11_pos_b", "CAPE_12_dep_b", "CAPE_13_pos_b", "CAPE_14_dep_b", "CAPE_15_pos_b", "CAPE_16_neg_b", "CAPE_17_pos_b", "CAPE_18_neg_b", "CAPE_19_dep_b", "CAPE_20_pos_b", "CAPE_21_neg_b", "CAPE_22_pos_b", "CAPE_23_neg_b", "CAPE_24_pos_b", "CAPE_25_neg_b", "CAPE_26_pos_b", "CAPE_27_neg_b", "CAPE_28_pos_b", "CAPE_29_neg_b", "CAPE_30_pos_b", "CAPE_31_pos_b", "CAPE_32_neg_b", "CAPE_33_pos_b", "CAPE_34_pos_b", "CAPE_35_neg_b", "CAPE_36_neg_b", "CAPE_37_neg_b", "CAPE_38_dep_b", "CAPE_39_dep_b", "CAPE_40_dep_b", "CAPE_41_pos_b", "CAPE_42_pos_b", "TICS_1", "TICS_2", "TICS_3", "TICS_4", "TICS_5", "TICS_6", "TICS_7", "TICS_8", "TICS_9", "TICS_10", "TICS_11", "TICS_12", "TICS_13", "TICS_14", "TICS_15", "TICS_16", "TICS_17", "TICS_18", "TICS_19", "TICS_20", "TICS_21", "TICS_22", "TICS_23", "TICS_24", "TICS_25", "TICS_26", "TICS_27", "TICS_28", "TICS_29", "TICS_30", "TICS_31", "TICS_32", "TICS_33", "TICS_34", "TICS_35", "TICS_36", "TICS_37", "TICS_38", "TICS_39", "TICS_40", "TICS_41", "TICS_42", "TICS_43", "TICS_44", "TICS_45", "TICS_46", "TICS_47", "TICS_48", "TICS_49", "TICS_50", "TICS_51", "TICS_52", "TICS_53", "TICS_54", "TICS_55", "TICS_56", "TICS_57", "THQ1", "THQ1_Hufigkeit", "THQ1_Alter", "THQ1_Beschreibung", "THQ2", "THQ2_Hufigkeit", "THQ2_Alter", "THQ2_Beschreibung", "THQ3", "THQ3_Hufigkeit", "THQ3_Alter", "THQ3_Beschreibung", "THQ4", "THQ4_Hufigkeit", "THQ4_Alter", "THQ4_Beschreibung", "THQ5", "THQ5_Hufigkeit", "THQ5_Alter", "THQ5_Beschreibung", "THQ6", "THQ6_Hufigkeit", "THQ6_Alter", "THQ6_Beschreibung", "THQ7", "THQ7_Hufigkeit", "THQ7_Alter", "THQ7_Beschreibung", "THQ8", "THQ8_Hufigkeit", "THQ8_Alter", "THQ8_Beschreibung", "THQ9", "THQ9_Hufigkeit", "THQ9_Alter", "THQ9_Beschreibung", "THQ10", "THQ10_Hufigkeit", "THQ10_Alter", "THQ10_Beschreibung", "THQ11", "THQ11_Hufigkeit", "THQ11_Alter", "THQ11_Beschreibung", "THQ12", "THQ12_Hufigkeit", "THQ12_Alter", "THQ12_Beschreibung", "THQ13", "THQ13_Hufigkeit", "THQ13_Alter", "THQ13_Beschreibung", "THQ14", "THQ14_Hufigkeit", "THQ14_Alter", "THQ14_Beschreibung", "THQ15", "THQ15_Hufigkeit", "THQ15_Alter", "THQ15_Beschreibung", "THQ16", "THQ16_Hufigkeit", "THQ16_Alter", "THQ16_Beschreibung", "THQ17", "THQ17_Hufigkeit", "THQ17_Alter", "THQ17_Beschreibung", "THQ18", "THQ18_Hufigkeit", "THQ18_Alter", "THQ18_Beschreibung", "THQ19", "THQ19_Hufigkeit", "THQ19_Alter", "THQ19_Beschreibung", "THQ20", "THQ20_Hufigkeit", "THQ20_Alter", "THQ20_Beschreibung", "THQ21", "THQ21_Hufigkeit", "THQ21_Alter", "THQ21_Beschreibung", "THQ22", "THQ22_Hufigkeit", "THQ22_Alter", "THQ22_Beschreibung", "THQ23", "THQ23_Hufigkeit", "THQ23_Alter", "THQ23_Beschreibung", "THQ24", "THQ24_Hufigkeit", "THQ24_Alter", "THQ24_Beschreibung", "SWE_1", "SWE_2", "SWE_3", "SWE_4", "SWE_5", "SWE_6", "SWE_7", "SWE_8", "SWE_9", "SWE_10", "ASM_R_Erfolg_1", "ASM_R_Erfolg_2", "ASM_R_Erfolg_3", "ASM_R_Erfolg_4", "ASM_R_Erfolg_5", "ASM_R_Misserfolg_1", "ASM_R_Misserfolg_2", "ASM_R_Misserfolg_3", "ASM_R_Misserfolg_4", "ASM_R_Misserfolg_5", "CAPE_pos", "CAPE_dep", "CAPE_neg", "CAPE_pos_mean", "CAPE_dep_mean", "CAPE_neg_mean", "gruppe", "TMT_A", "TMT_B", "TMT_diff"];
opts.VariableTypes = ["datetime", "datetime", "double", "categorical", "double", "double", "double", "datetime", "string", "string", "string", "string", "string", "double", "double", "categorical", "categorical", "string", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "string", "double", "double", "double", "double", "string", "string", "string", "double", "double", "double", "double", "string", "string", "double", "double", "double", "double", "string", "double", "string", "double", "double", "double", "string", "double", "double", "double", "double", "double", "double", "string", "string", "string", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "string", "double", "double", "double", "string", "double", "double", "double", "string", "double", "double", "double", "string", "double", "double", "double", "string", "double", "double", "double", "string", "double", "double", "double", "string", "double", "string", "string", "string", "double", "double", "double", "string", "double", "string", "double", "string", "double", "double", "double", "string", "double", "string", "double", "string", "double", "double", "double", "string", "double", "string", "double", "string", "double", "double", "double", "string", "double", "double", "double", "string", "double", "double", "double", "string", "double", "string", "double", "string", "double", "string", "double", "string", "double", "double", "double", "string", "double", "double", "double", "string", "double", "double", "string", "string", "double", "string", "string", "string", "double", "double", "string", "string", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double"];
opts = setvaropts(opts, 1, "InputFormat", "MM/dd/yyyy HH:mm:ss");
opts = setvaropts(opts, 2, "InputFormat", "MM/dd/yyyy HH:mm:ss");
opts = setvaropts(opts, 8, "InputFormat", "MM/dd/yyyy HH:mm:ss");
opts = setvaropts(opts, [9, 10, 11, 12, 13, 38, 43, 44, 45, 50, 51, 56, 58, 62, 69, 70, 71, 219, 223, 227, 231, 235, 239, 243, 245, 246, 247, 251, 253, 255, 259, 261, 263, 267, 269, 271, 275, 279, 283, 285, 287, 289, 291, 295, 299, 302, 303, 305, 306, 307, 310, 311], "WhitespaceRule", "preserve");
%opts = setvaropts(opts, [18, 335, 336, 337], "TrimNonNumeric", true);
%opts = setvaropts(opts, [18, 335, 336, 337], "ThousandsSeparator", ",");
opts = setvaropts(opts, [4, 9, 10, 11, 12, 13, 16, 17, 38, 43, 44, 45, 50, 51, 56, 58, 62, 69, 70, 71, 219, 223, 227, 231, 235, 239, 243, 245, 246, 247, 251, 253, 255, 259, 261, 263, 267, 269, 271, 275, 279, 283, 285, 287, 289, 291, 295, 299, 302, 303, 305, 306, 307, 310, 311], "EmptyFieldRule", "auto");
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% import the data
dat = readtable(filename, opts);

% loop through subjects and compute CAPE scores
for s = 1:length(subjects)
    CAPE_N(s,1) = max(nanmean(dat{strcmp(subjects{s},dat.ID),~cellfun(@isempty,strfind(opts.SelectedVariableNames,'CAPE_neg'))}));
    CAPE_P(s,1) = max(nanmean(dat{strcmp(subjects{s},dat.ID),~cellfun(@isempty,strfind(opts.SelectedVariableNames,'CAPE_pos'))}));
    CAPE_D(s,1) = max(nanmean(dat{strcmp(subjects{s},dat.ID),~cellfun(@isempty,strfind(opts.SelectedVariableNames,'CAPE_dep'))}));
end

scores = [CAPE_P CAPE_N CAPE_D];
names = {'P','N','D'};
